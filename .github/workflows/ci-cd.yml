name: CI/CD Pipeline

on:
  push:
    branches: [ main, "feature/**" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test Application
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        
    - name: Download dependencies
      run: go mod download
      
    - name: Build
      run: go build -o server .

    - name: Smoke test
      run: |
        echo "🧪 Running Go app smoke test..."
        ./server &
        SERVER_PID=$!
        sleep 2
        curl -f http://localhost:3001/ | grep "Hello" || (kill $SERVER_PID; exit 1)
        echo "✅ Application is responding correctly!"
        kill $SERVER_PID || true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    name: 🐳 Build & Push Docker Image
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fetch tags
      run: git fetch --tags --force

    - name: Get latest tag
      id: get_tag
      run: |
        TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
        echo "TAG=$TAG"
        echo "tag=$TAG" >> "$GITHUB_OUTPUT"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=${{ steps.get_tag.outputs.tag }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}